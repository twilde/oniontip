#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Retrieve the transaction history for bitcoin addresses generated by
TorTip.com.
'''

import logging
from argparse import ArgumentParser
import bitcoin

ONIONTIP_BITCOIN_PUBLIC_SEED = '09270c4d662183cd0d74ac749e191a98c454340e5f57d5fb8382a1cbdafff58525260ab12484b6f608c8f7a1e2cc7ffea8d3ff44f49e3b1ca761e5f8c39b04b4'


def main(args):
    '''
    OnionTip uses a simple Type 1 deterministic wallet where
    a key is generated from a seed appended with an increasing integer
    '''
    logging.basicConfig(level=args.loglevel or logging.INFO, format='%(message)s')
    total_spent = 0
    total_unspent = 0

    logging.info(__doc__)
    logging.info('Starting to check {} addreses beginning from address offset {}\n'.format(
        args.limit,args.offset)
    )

    for key_increment in range(args.offset, (args.offset + args.limit)):
        address = bitcoin.electrum_address(args.public_seed, key_increment)

        try:
            history = bitcoin.history(address)
        except:
            logging.info('Network error when retreiving the transaction history for address {} (n={})'.format(
                address, key_increment
            ))
            break

        if not history:
            logging.debug('No transactions were found for address {} (n={})'.format(address, key_increment))
        else:
            spent = sum(output.get('value', 0) for output in history if 'spend' in output)
            unspent = sum(output.get('value', 0) for output in history if not 'spend' in output)
            total_spent += spent
            total_unspent += unspent

            if unspent:
                logging.info('The address {} has unforwarded donations totaling {} satoshi! (n={})'.format(
                    address, unspent, key_increment)
                )
            else:
                logging.info('All donations to {} totaling {} satoshi have been forwarded! (n={})'.format(
                    address, spent, key_increment)
                )

    logging.info('\nComplete! {} addresses were checked. {} satoshi were successfully forwarded and {} satoshi were unforwarded.'.format(
                    args.limit, total_spent, total_unspent
    ))


if __name__ == '__main__':
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--verbose',
        help='Verbose logging including information about unused addresses',
        action='store_const', const=logging.DEBUG, dest='loglevel')
    parser.add_argument('-p', '--public-seed',
        help='Specify an alternative public key seed for address generation',
        default=ONIONTIP_BITCOIN_PUBLIC_SEED, dest='public_seed')
    parser.add_argument('-l', '--limit', type=int, default=200, dest='limit',
        help='Limit the number of addresses to check (default: 200)')
    parser.add_argument('-o', '--offset', type=int, default=0, dest='offset',
        help='Specify an offset to skip before checking addresses. (default: 0)')
    args = parser.parse_args()
    main(args)
